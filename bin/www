#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('smause-backend:server');
var http = require('http');
const db = require("../db");
// const socketIO = require("socket.io");
const socketIO = require("socket.io");

const socket = require('../app/socketIo/index')


var port = normalizePort(process.env.PORT || "3002");
app.set("port", port);

var server = http.createServer(app);

const io = socketIO(server, {
    cors: {
      origin: process.env.SOCKET_PORT,
      credentials: true,
    },
  });

let Socket = {
    emit:(event, data) => {
        io.sockets.emit(event, data)
    }
}

io.on("connection", (socket) => {
  console.log("We are live and connected");
});



db.on("error", function (err) {
  console.log("connection error : tidak bisa tersambung ke mongodb");
});

db.on("open", function () {
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
});


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

exports.socketConnection = {"io":io, "socket": Socket}

